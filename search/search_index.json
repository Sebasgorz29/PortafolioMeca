{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Proyectos con ESP32 y Arduino","text":"<p>Bienvenidos a todos en este grupo de pr\u00e1cticas t\u00e9cnicas con microcontroladores. Aqu\u00ed encontrar\u00e1s documentaci\u00f3n clara, c\u00f3digo funcional y evidencias de proyectos realizados con ESP32 y Arduino. Cada pr\u00e1ctica explora conceptos clave de electr\u00f3nica, programaci\u00f3n y control f\u00edsico.</p>"},{"location":"#indice-de-practicas","title":"\ud83d\udcda \u00cdndice de Pr\u00e1cticas","text":""},{"location":"#comunicacion-bluetooth-entre-esp32-y-celular","title":"\ud83d\udd35 Comunicaci\u00f3n Bluetooth entre ESP32 y Celular","text":"<p>Establece una conexi\u00f3n inal\u00e1mbrica entre un ESP32 y un celular para recibir mensajes en tiempo real.</p>"},{"location":"#encendido-de-led-con-pulsador-usando-arduino","title":"\ud83d\udd34 Encendido de LED con Pulsador usando Arduino","text":"<p>Controla un LED mediante un bot\u00f3n f\u00edsico, aplicando l\u00f3gica digital y resistencias pull-down.</p>"},{"location":"#control-de-giro-velocidad-y-posicion-con-esp32","title":"\u2699\ufe0f Control de Giro, Velocidad y Posici\u00f3n con ESP32","text":"<p>Manipula motores DC y servos usando PWM y mapeo de valores para posicionamiento preciso.</p>"},{"location":"#vehiculo-controlado-por-bluetooth-con-motores-dc","title":"\ud83d\ude97 Veh\u00edculo Controlado por Bluetooth con Motores DC","text":"<p>Dise\u00f1a y programa un coche rob\u00f3tico con ESP32, puente H y control remoto v\u00eda Bluetooth.</p>"},{"location":"#tecnologias-utilizadas","title":"\ud83d\udcce Tecnolog\u00edas Utilizadas","text":"<ul> <li>\ud83e\udde0 Microcontroladores: ESP32, Arduino UNO  </li> <li>\ud83d\udcbb Software: Arduino IDE, SolidWorks, PSeInt  </li> <li>\ud83d\udd27 Lenguajes: C++, Python  </li> <li>\ud83d\udcf2 Comunicaci\u00f3n: Bluetooth, PWM, l\u00f3gica digital  </li> </ul>"},{"location":"ESP32yCelular/","title":"\ud83d\udcf6 Comunicaci\u00f3n Bluetooth entre ESP32 y Celular","text":""},{"location":"ESP32yCelular/#proposito","title":"\ud83c\udfaf Prop\u00f3sito","text":"<p>Establecer una comunicaci\u00f3n inal\u00e1mbrica entre un ESP32 y un tel\u00e9fono celular mediante Bluetooth, para enviar mensajes desde la app de Arduino y visualizar los textos recibidos en el monitor serial de la computadora.</p>"},{"location":"ESP32yCelular/#meta-de-la-practica","title":"\ud83e\udded Meta de la pr\u00e1ctica","text":"<p>Lograr que el ESP32 reciba mensajes escritos desde una app m\u00f3vil y los muestre en el monitor serial de la computadora a trav\u00e9s de una conexi\u00f3n Bluetooth.</p>"},{"location":"ESP32yCelular/#organizacion-del-equipo","title":"\ud83d\udc65 Organizaci\u00f3n del Equipo","text":"<p>La organizaci\u00f3n fue eficaz: el equipo se dividi\u00f3 en dos \u00e1reas principales: - Desarrollo del c\u00f3digo de programaci\u00f3n - Desarrollo electr\u00f3nico</p>"},{"location":"ESP32yCelular/#materiales-utilizados","title":"\ud83e\uddf0 Materiales Utilizados","text":"<ul> <li>ESP32  </li> <li>Protoboard  </li> <li>Cables de conexi\u00f3n (jumpers)  </li> <li>Cable USB para cargar el programa  </li> <li>Aplicaci\u00f3n Arduino Bluetooth Controller (en celular Android)  </li> <li>Computadora con Arduino IDE  </li> </ul>"},{"location":"ESP32yCelular/#tecnologias-utilizadas","title":"\ud83e\uddea Tecnolog\u00edas Utilizadas","text":"<ul> <li>Lenguajes: Python  </li> <li>Hardware: ESP32, Arduino  </li> <li>Software: Arduino IDE  </li> <li>Sistema Electr\u00f3nico: Comunicaci\u00f3n Bluetooth sin sensores ni actuadores externos</li> </ul>"},{"location":"ESP32yCelular/#funcion-del-esp32","title":"\ud83e\udde0 Funci\u00f3n del ESP32","text":"<p>El ESP32 se conect\u00f3 a la computadora mediante USB. No se utilizaron sensores ni actuadores, ya que el enfoque fue exclusivamente en la comunicaci\u00f3n Bluetooth. Se configur\u00f3 como servidor Bluetooth para que el celular pudiera detectarlo y conectarse.</p>"},{"location":"ESP32yCelular/#programacion","title":"\ud83d\udce1 Programaci\u00f3n","text":"<p>Este proyecto permite establecer una comunicaci\u00f3n inal\u00e1mbrica entre un ESP32 y un tel\u00e9fono celular mediante Bluetooth. El objetivo es recibir mensajes escritos desde una app m\u00f3vil y mostrarlos en el monitor serial de la computadora.</p>"},{"location":"ESP32yCelular/#flujo-del-codigo","title":"\ud83d\udd27 Flujo del c\u00f3digo","text":"<ol> <li>Librer\u00eda Bluetooth</li> <li>Se incluye <code>BluetoothSerial.h</code> para habilitar la comunicaci\u00f3n Bluetooth.</li> <li> <p>Se crea el objeto <code>SerialBT</code> para manejar la conexi\u00f3n.</p> </li> <li> <p>Configuraci\u00f3n inicial (<code>setup()</code>)</p> </li> <li>Se inicia la comunicaci\u00f3n serial con <code>Serial.begin(115200)</code>.</li> <li>Se activa el Bluetooth con <code>SerialBT.begin(\"ESP32A\u00d1\")</code>.</li> <li> <p>Se imprime un mensaje indicando que el Bluetooth est\u00e1 listo.</p> </li> <li> <p>Ciclo principal (<code>loop()</code>)</p> </li> <li>Se verifica si hay datos disponibles con <code>SerialBT.available()</code>.</li> <li>Si se detecta un mensaje:<ul> <li>Se lee con <code>SerialBT.readString()</code>.</li> <li>Se muestra en el monitor serial con <code>Serial.println()</code>.</li> </ul> </li> <li>Se incluye un retraso de 1 segundo (<code>delay(1000)</code>) para evitar sobrecarga.</li> </ol>"},{"location":"ESP32yCelular/#aplicacion","title":"\ud83d\udcf2 Aplicaci\u00f3n","text":"<p>Este c\u00f3digo convierte al ESP32 en un receptor Bluetooth que recibe texto desde un celular y lo muestra en tiempo real en la computadora. Es \u00fatil para proyectos de: - Comunicaci\u00f3n inal\u00e1mbrica - Monitoreo de datos - Control remoto b\u00e1sico</p>"},{"location":"ESP32yCelular/#resultados-y-observaciones","title":"\ud83d\udcc8 Resultados y Observaciones","text":"<ul> <li>La conexi\u00f3n Bluetooth fue exitosa y estable.  </li> <li>Los mensajes enviados desde el celular se reflejaron correctamente en el monitor serial.  </li> <li>El ESP32 respondi\u00f3 de forma inmediata.  </li> <li>No se presentaron errores de transmisi\u00f3n ni desconexiones durante la prueba.</li> </ul>"},{"location":"ESP32yCelular/#codigo","title":"Codigo","text":"<pre><code>#include \"BluetoothSerial.h\"   \n\nBluetoothSerial SerialBT;      \nvoid setup() {\n  Serial.begin(115200);       \n  SerialBT.begin(\"ESP32A\u00d1\");   \n  Serial.println(\"Bluetooth listo. Esperando conexi\u00f3n...\");\n}\n\nvoid loop() {\n  if (SerialBT.available()) {                \n    String mensaje = SerialBT.readString();  \n    Serial.println(\"Recibido: \" + mensaje);  \n  delay(1000);  \n}\n</code></pre>"},{"location":"ESP32yCelular/#evidencias","title":"\ud83d\udcf9 Evidencias","text":"<p>Evidencias en video aqu\u00ed.</p>"},{"location":"EncendidodeLED/","title":"\ud83d\udca1 Encendido del LED con Pulsador usando Arduino","text":""},{"location":"EncendidodeLED/#proposito","title":"\ud83c\udfaf Prop\u00f3sito","text":"<p>El objetivo principal de esta pr\u00e1ctica fue llegar a comprender el funcionamiento b\u00e1sico de entradas y salidas digitales en Arduino. Se busc\u00f3 el controlar el encendido de un LED simplemente utilizando un bot\u00f3n f\u00edsico conectado a una protoboard, aplicando conceptos fundamentales de electr\u00f3nica como resistencias pull-down y l\u00f3gica de control.</p>"},{"location":"EncendidodeLED/#meta-de-la-practica","title":"\ud83e\udded Meta de la pr\u00e1ctica","text":"<p>Poder llegar a comprender el funcionamiento de entradas digitales en Arduino y aplicar este conocimiento para controlar un LED asi mediante a un pulsador f\u00edsico.</p>"},{"location":"EncendidodeLED/#organizacion-del-equipo","title":"\ud83d\udc65 Organizaci\u00f3n del Equipo","text":"<p>El equipo se dividi\u00f3 en dos \u00e1reas principales: - Desarrollo del c\u00f3digo de programaci\u00f3n - Desarrollo electr\u00f3nico</p>"},{"location":"EncendidodeLED/#materiales-utilizados","title":"\ud83e\uddf0 Materiales Utilizados","text":"<ul> <li>Arduino UNO  </li> <li>Protoboard  </li> <li>LED rojo  </li> <li>Resistencia de 220\u03a9 (limitadora para el LED)  </li> <li>Resistencia de 10k\u03a9 (pull-down para el bot\u00f3n)  </li> <li>Pulsador (bot\u00f3n)  </li> <li>Cables de conexi\u00f3n (jumpers)  </li> <li>Cable USB para cargar el programa  </li> </ul>"},{"location":"EncendidodeLED/#tecnologias-utilizadas","title":"\ud83e\uddea Tecnolog\u00edas Utilizadas","text":"<ul> <li>Lenguajes: Python  </li> <li>Hardware: ESP32, Arduino  </li> <li>Software: Arduino IDE  </li> </ul>"},{"location":"EncendidodeLED/#sistema-electronico","title":"\u26a1 Sistema Electr\u00f3nico","text":"<p>El circuito se arm\u00f3 sobre una protoboard. El LED se conect\u00f3 al pin digital 13 del Arduino, con una resistencia de 220\u03a9 en serie para evitar sobrecorriente. El bot\u00f3n se conect\u00f3 al pin digital 2, acompa\u00f1ado de una resistencia de 10k\u03a9 como pull-down para asegurar que el estado del pin sea bajo cuando el bot\u00f3n no est\u00e1 presionado. La l\u00f3gica del circuito es simple: - Al presionar el bot\u00f3n, el pin digital lee un estado alto (HIGH) y enciende el LED. - Al soltarlo, el estado vuelve a bajo (LOW) y el LED se apaga.</p>"},{"location":"EncendidodeLED/#programacion","title":"\ud83e\udde0 Programaci\u00f3n","text":"<p>El c\u00f3digo fue escrito en Arduino IDE y se basa en la lectura del estado del bot\u00f3n para controlar el LED. El c\u00f3digo se desarroll\u00f3 en base y apoyo del c\u00f3digo proporcionado por Oliver.</p>"},{"location":"EncendidodeLED/#resultados-y-observaciones","title":"\ud83d\udcc8 Resultados y Observaciones","text":"<p>El circuito respondi\u00f3 correctamente al presionar el bot\u00f3n, encendiendo el LED de forma inmediata. Se comprob\u00f3 que la resistencia pull-down evit\u00f3 lecturas err\u00e1ticas cuando el bot\u00f3n no estaba presionado. La pr\u00e1ctica permiti\u00f3 verificar el funcionamiento b\u00e1sico de entradas y salidas digitales en Arduino, y se logr\u00f3 una interacci\u00f3n estable entre hardware y software.</p>"},{"location":"EncendidodeLED/#reflexion-final","title":"\ud83e\udde9 Reflexion Final","text":"<p>Esta pr\u00e1ctica fue una excelente y educativa introducci\u00f3n al uso de microcontroladores. Puesto que se logr\u00f3 entender c\u00f3mo interact\u00faan los componentes electr\u00f3nicos b\u00e1sicos con el Arduino y c\u00f3mo la programaci\u00f3n puede controlar el comportamiento f\u00edsico de un sistema. Se aprendi\u00f3 la importancia de las resistencias pull-down para evitar lecturas err\u00e1ticas, y se reforz\u00f3 el concepto de entradas y salidas digitales. Adem\u00e1s, se comprob\u00f3 que incluso con un circuito sencillo se pueden lograr interacciones \u00fatiles entre hardware y software.</p>"},{"location":"EncendidodeLED/#codigo","title":"Codigo","text":"<pre><code>const int led=27;\nconst int button=32;\n\nvoid setup() {\n  Serial.begin(115200); //INICIO LA COMUNICACION EN 115200 char por segundo\n  pinMode(led,OUTPUT);\n  pinMode(button,INPUT);\n}\n\nvoid loop() {\n  int estado = digitalRead(button);\n  if(estado == 1){\n    digitalWrite(led,1);\n  }\n  else{\n    digitalWrite(led,0);\n  }\n}\n</code></pre>"},{"location":"EncendidodeLED/#evidencias","title":"\ud83d\udcf9 Evidencias","text":"<p>Evidencias en video aqu\u00ed.</p>"},{"location":"Motor/","title":"\u2699\ufe0f Control de Giro, Velocidad y Posici\u00f3n con ESP32","text":""},{"location":"Motor/#proposito","title":"\ud83c\udfaf Prop\u00f3sito","text":"<p>Explorar el control de motores mediante el ESP32, aplicando t\u00e9cnicas de cambio de giro, variaci\u00f3n de velocidad con PWM y posicionamiento de servo motores.</p>"},{"location":"Motor/#meta-de-la-practica","title":"\ud83e\udded Meta de la pr\u00e1ctica","text":"<p>Poder comprender c\u00f3mo llegar a controlar motores DC y servos utilizando programaci\u00f3n en ESP32, aplicando conceptos de l\u00f3gica digital, modulaci\u00f3n por ancho de pulso (PWM) y mapeo de valores para posicionamiento.</p>"},{"location":"Motor/#organizacion-del-equipo","title":"\ud83d\udc65 Organizaci\u00f3n del Equipo","text":"<p>El equipo se dividi\u00f3 en dos \u00e1reas principales: - Desarrollo del c\u00f3digo de programaci\u00f3n - Desarrollo electr\u00f3nico</p>"},{"location":"Motor/#materiales-utilizados","title":"\ud83e\uddf0 Materiales Utilizados","text":"<ul> <li>ESP32  </li> <li>Motor DC  </li> <li>Servo motor  </li> <li>Protoboard  </li> <li>Cables de conexi\u00f3n (jumpers)  </li> <li>Fuente de alimentaci\u00f3n  </li> <li>Cable USB para cargar el programa  </li> </ul>"},{"location":"Motor/#tecnologias-utilizadas","title":"\ud83e\uddea Tecnolog\u00edas Utilizadas","text":"<ul> <li>Lenguajes: Python  </li> <li>Hardware: ESP32, Arduino  </li> <li>Software: Arduino IDE  </li> </ul>"},{"location":"Motor/#sistema-electronico","title":"\u26a1 Sistema Electr\u00f3nico","text":"<ul> <li>Cambio de giro del motor DC: Se conectaron dos pines digitales al motor, alternando su estado para cambiar la direcci\u00f3n de giro (adelante y atr\u00e1s).  </li> <li>Control de velocidad del motor DC: Se utiliz\u00f3 un pin PWM configurado para incrementar la velocidad del motor.  </li> <li>Control de posici\u00f3n de un servo motor: Se configur\u00f3 un canal PWM con frecuencia de 50 Hz y resoluci\u00f3n de 12 bits. Se us\u00f3 la funci\u00f3n <code>map()</code> para convertir grados (0\u00b0 a 180\u00b0) en valores de duty cycle entre 205 y 410, que corresponden al rango de operaci\u00f3n del servo.</li> </ul>"},{"location":"Motor/#programacion","title":"\ud83e\udde0 Programaci\u00f3n","text":"<ul> <li>Cambio de giro: Alterna los pines <code>in1</code> e <code>in2</code> para cambiar la direcci\u00f3n del motor.  </li> <li>Velocidad progresiva: Usa <code>ledcWrite()</code> para aumentar gradualmente la velocidad del motor en pasos del 20%.  </li> <li>Servo motor: Utiliza PWM de 12 bits para mover el servo a posiciones espec\u00edficas (0\u00b0, 90\u00b0, 180\u00b0), mostrando los valores en el monitor serial.</li> </ul>"},{"location":"Motor/#resultados-y-observaciones","title":"\ud83d\udcc8 Resultados y Observaciones","text":"<p>El motor DC respondi\u00f3 correctamente al cambio de giro, alternando entre avance y retroceso. El control de velocidad fue progresivo y estable, mostrando c\u00f3mo el PWM puede modificar la potencia entregada al motor. El servo motor se posicion\u00f3 con precisi\u00f3n en los \u00e1ngulos programados, y los valores de duty cycle se reflejaron correctamente en el monitor serial. No se presentaron errores de conexi\u00f3n ni fallas en la ejecuci\u00f3n de los c\u00f3digos.</p>"},{"location":"Motor/#reflexiones-finales","title":"\ud83e\udde9 Reflexiones Finales","text":"<p>Esta pr\u00e1ctica permiti\u00f3 comprender tres aspectos fundamentales del control de motores con ESP32: direcci\u00f3n, velocidad y posici\u00f3n. Se reforz\u00f3 el uso de PWM en diferentes resoluciones y frecuencias, y se evidenci\u00f3 c\u00f3mo la programaci\u00f3n puede traducirse en movimientos f\u00edsicos precisos. Adem\u00e1s, se aprendi\u00f3 a mapear valores para controlar servos, y se observ\u00f3 la importancia de los retardos (<code>delay</code>) para estabilizar los cambios.</p>"},{"location":"Motor/#codigo-direccion-basica","title":"Codigo Direccion Basica","text":"<pre><code>/*Control de 1 solo motor*/\n#define in1 27\n#define in2 14\n\nvoid setup() {\n  /*Declarar Pines Como salida*/\n  pinMode(in1, OUTPUT);\n  pinMode(in2, OUTPUT);\n}\n\nvoid loop() {\n  /*ADELANTE*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 1);\n  delay(1000);\n  /*ALTO*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 0);\n  delay(1000);\n  /*ATRAS*/\n  digitalWrite(in1, 1);\n  digitalWrite(in2, 0);\n  delay(1000);\n  /*ALTO*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 0);\n  delay(1000);\n}\n</code></pre>"},{"location":"Motor/#codigo-control-de-velocidad","title":"Codigo Control de velocidad","text":"<pre><code>/*Control de 1 solo motor*/\n#define in1 27\n#define in2 14\n\nvoid setup() {\n  /*Declarar Pines Como salida*/\n  pinMode(in1, OUTPUT);\n  pinMode(in2, OUTPUT);\n}\n\nvoid loop() {\n  /*ADELANTE*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 1);\n  delay(1000);\n  /*ALTO*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 0);\n  delay(1000);\n  /*ATRAS*/\n  digitalWrite(in1, 1);\n  digitalWrite(in2, 0);\n  delay(1000);\n  /*ALTO*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 0);\n  delay(1000);\n}\n</code></pre>"},{"location":"Motor/#codigo-control-de-servo","title":"Codigo Control de Servo","text":"<pre><code>/*Control de 1 solo motor*/\n#define pwm 12 //Definicion de pin de Velocidad\nint duty = 0;\nint grados = 0;\nvoid setup() {\n  /*Declarar Pines Como salida*/\n  pinMode(in1, OUTPUT);\n  pinMode(in2, OUTPUT);\n  /*Configuracion de pin PWM \n    - Se conecta al pin 12(pwm)\n    - Frecuencia de 50hz\n    - Resolucion de 12 bit (0-4096)\n    - Canal 0\n  */\n  ledcAttachChannel(pwm, 50, 12, 0);\n  Serial.begin(115200);\n}\n\nvoid loop() { \n  /*\n  Servo trabaja del ~5% al ~10% del total\n  ~5% - 0\u00b0\n  ~10% - 180\u00b0\n  5% de 4096 = 204.8\n  10% de 4096 = 409.6\n  */\n  grados=0;\n  duty= map(grados, 0, 180, 205, 410);\n  Serial.print(\"Pos: \");\n  Serial.println(duty);\n  ledcWrite(pwm, duty);\n  delay(1000);\n  grados=90;\n  duty= map(grados, 0, 180, 205, 410);\n  Serial.print(\"Pos: \");\n  Serial.println(duty);\n  ledcWrite(pwm, duty);\n  delay(1000);\n  grados=180;\n  duty= map(grados, 0, 180, 205, 410);\n  Serial.print(\"Pos: \");\n  Serial.println(duty);\n  ledcWrite(pwm, duty);\n  delay(1000);\n}\n</code></pre>"},{"location":"Motor/#evidencias","title":"\ud83d\udcf9 Evidencias","text":"<p>Evidencias en video aqu\u00ed.</p>"},{"location":"Vehiculo/","title":"\ud83d\ude97 Veh\u00edculo Controlado por Bluetooth con Motores DC","text":""},{"location":"Vehiculo/#proposito","title":"\ud83c\udfaf Prop\u00f3sito","text":"<p>Este proyecto consisti\u00f3 en el dise\u00f1o y construcci\u00f3n de un veh\u00edculo a control remoto, utilizando motores de corriente directa (DC), un puente H para el control de direcci\u00f3n, y un microcontrolador ESP32 para la comunicaci\u00f3n v\u00eda Bluetooth. El objetivo principal fue aplicar conocimientos b\u00e1sicos de electr\u00f3nica, mec\u00e1nica y programaci\u00f3n para competir en una din\u00e1mica de rob\u00f3tica.</p>"},{"location":"Vehiculo/#metas-del-proyecto","title":"\ud83e\udded Metas del Proyecto","text":"<p>Meta General: Desarrollar un prototipo funcional de un coche a control remoto que pueda participar en una competencia de rob\u00f3tica, demostrando habilidades de dise\u00f1o, integraci\u00f3n de sistemas y trabajo en equipo.</p> <p>Metas Espec\u00edficas: - Implementar un sistema de control que permita maniobrar el veh\u00edculo con precisi\u00f3n y velocidad. - Dise\u00f1ar una pala frontal que facilite la interacci\u00f3n con objetos (como pelotas) durante la competencia. - Optimizar el rendimiento del coche para lograr una ventaja competitiva en el juego.</p>"},{"location":"Vehiculo/#alcance-del-proyecto","title":"\ud83d\udcd0 Alcance del Proyecto","text":"<p>El proyecto abarc\u00f3 desde la conceptualizaci\u00f3n del dise\u00f1o hasta la implementaci\u00f3n completa del sistema electr\u00f3nico y mec\u00e1nico. Se trabaj\u00f3 con materiales accesibles y se estableci\u00f3 un l\u00edmite de dos semanas para su desarrollo.</p> <p>Incluye: - Dise\u00f1o estructural del veh\u00edculo - Integraci\u00f3n de componentes electr\u00f3nicos - Programaci\u00f3n del sistema de control - Pruebas funcionales previas a la competencia</p>"},{"location":"Vehiculo/#proceso-del-trabajo","title":"\ud83d\udd04 Proceso del Trabajo","text":""},{"location":"Vehiculo/#organizacion-del-equipo","title":"\ud83d\udc65 Organizaci\u00f3n del Equipo","text":"<p>El equipo se dividi\u00f3 en dos \u00e1reas principales: - Desarrollo del c\u00f3digo de programaci\u00f3n - Desarrollo electr\u00f3nico - Dise\u00f1o</p> <p>Mientras algunos miembros se encargaron de la estructura del coche, otros se enfocaron en la programaci\u00f3n y conexiones.</p>"},{"location":"Vehiculo/#materiales-utilizados","title":"\ud83e\uddf0 Materiales Utilizados","text":"<ul> <li>2 motores DC  </li> <li>Puente H  </li> <li>ESP32  </li> <li>Protoboard  </li> <li>Jumpers  </li> <li>LED  </li> <li>Bater\u00eda de 9V  </li> <li>MDF para la base  </li> <li>PLA para impresi\u00f3n 3D de la pala frontal</li> </ul>"},{"location":"Vehiculo/#tecnologias-utilizadas","title":"\ud83e\uddea Tecnolog\u00edas Utilizadas","text":"<ul> <li>Lenguajes: Python, C++  </li> <li>Hardware: ESP32, Arduino  </li> <li>Software: SolidWorks, PSeInt  </li> <li>Otros: CircuitVerse</li> </ul>"},{"location":"Vehiculo/#sistema-electronico","title":"\u26a1 Sistema Electr\u00f3nico","text":"<ul> <li>Se conectaron los motores al puente H, asegurando una correcta polaridad y conexi\u00f3n a tierra.  </li> <li>Los pines IN1 a IN4 se configuraron para controlar la direcci\u00f3n de giro de los motores.  </li> <li>La ESP32 se integr\u00f3 como unidad de control, con especial atenci\u00f3n a la asignaci\u00f3n de pines y la protecci\u00f3n contra cortocircuitos.</li> </ul>"},{"location":"Vehiculo/#programacion","title":"\ud83e\udde0 Programaci\u00f3n","text":"<p>Se desarroll\u00f3 un programa en Arduino IDE que permite controlar el coche mediante una aplicaci\u00f3n Bluetooth.</p> <p>Funciones principales: - Avanzar - Retroceder - Girar a la izquierda/derecha - Detenerse - Ajustar velocidad mediante PWM  </p> <p>La l\u00f3gica de movimiento se bas\u00f3 en la manipulaci\u00f3n de los motores: por ejemplo, para girar, se detiene una rueda mientras la otra sigue girando. El c\u00f3digo para controlar el coche se encuentra al final del art\u00edculo.</p>"},{"location":"Vehiculo/#resultados-y-observaciones","title":"\ud83d\udcc8 Resultados y Observaciones","text":"<p>Antes de la competencia, el coche mostr\u00f3 un buen desempe\u00f1o: - Respond\u00eda a los comandos - La pala funcionaba correctamente - El dise\u00f1o era estable  </p> <p>Durante el evento surgieron algunos inconvenientes: - Uno de los motores se desprendi\u00f3 tras un choque con una silla - El control Bluetooth presentaba cierto retraso en la respuesta - Los movimientos eran algo bruscos, lo que dificultaba la precisi\u00f3n  </p> <p>A pesar de estos detalles, el coche cumpli\u00f3 con los objetivos t\u00e9cnicos del proyecto.</p>"},{"location":"Vehiculo/#reflexiones-finales","title":"\ud83e\udde9 Reflexiones Finales","text":"<p>El proyecto fue una excelente oportunidad para aplicar conocimientos te\u00f3ricos en un entorno pr\u00e1ctico. Se logr\u00f3 integrar electr\u00f3nica, mec\u00e1nica y programaci\u00f3n en un sistema funcional.</p> <p>\u00c1reas de mejora identificadas: - Realizar m\u00e1s pruebas antes de la competencia - Mejorar el montaje de los motores - Optimizar el control desde la app  </p> <p>Esta experiencia reforz\u00f3 la importancia de la planificaci\u00f3n, el trabajo colaborativo y la iteraci\u00f3n constante para lograr un producto funcional y competitivo.</p>"},{"location":"Vehiculo/#codigo-para-controlar-el-coche","title":"Codigo para controlar el coche","text":"<pre><code>#include \"BluetoothSerial.h\"\n\nBluetoothSerial SerialBT;\n\n// Pines del puente H\nconst int IN1 = 12; // Motor izquierdo\nconst int IN2 = 11;\nconst int ENA = 13;\nconst int IN3 = 10; // Motor derecho\nconst int IN4 = 9;\nconst int ENB = 7;\n\nint valSpeed = 255;\n\nvoid setup() {\n  Serial.begin(115200);\n  SerialBT.begin(\"CarroESP32\"); // Nombre del dispositivo Bluetooth\n\n  pinMode(IN1, OUTPUT);\n  pinMode(IN2, OUTPUT);\n  pinMode(ENA, OUTPUT);\n  pinMode(IN3, OUTPUT);\n  pinMode(IN4, OUTPUT);\n  pinMode(ENB, OUTPUT);\n\n  stopMotors();\n}\n\nvoid loop() {\n  if (SerialBT.available()) {\n    char command = SerialBT.read();\n    Serial.println(command);\n\n    switch (command) {\n      case 'F': forward(); break;\n      case 'B': backward(); break;\n      case 'L': turnLeft(); break;\n      case 'R': turnRight(); break;\n      case 'S': stopMotors(); break;\n      case '0': setSpeed(0); break;\n      case '1': setSpeed(25); break;\n      case '2': setSpeed(50); break;\n      case '3': setSpeed(75); break;\n      case '4': setSpeed(100); break;\n      case '5': setSpeed(125); break;\n      case '6': setSpeed(150); break;\n      case '7': setSpeed(175); break;\n      case '8': setSpeed(200); break;\n      case '9': setSpeed(255); break;\n    }\n  }\n}\n\nvoid forward() {\n  analogWrite(ENA, valSpeed);\n  analogWrite(ENB, valSpeed);\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n}\n\nvoid backward() {\n  analogWrite(ENA, valSpeed);\n  analogWrite(ENB, valSpeed);\n  digitalWrite(IN1, LOW);\n  digitalWrite(IN2, HIGH);\n  digitalWrite(IN3, LOW);\n  digitalWrite(IN4, HIGH);\n}\n\nvoid turnLeft() {\n  analogWrite(ENA, valSpeed / 2);\n  analogWrite(ENB, valSpeed);\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n}\n\nvoid turnRight() {\n  analogWrite(ENA, valSpeed);\n  analogWrite(ENB, valSpeed / 2);\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n}\n\nvoid stopMotors() {\n  analogWrite(ENA, 0);\n  analogWrite(ENB, 0);\n  digitalWrite(IN1, LOW);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, LOW);\n  digitalWrite(IN4, LOW);\n}\n\nvoid setSpeed(int val) {\n  valSpeed = val;\n}\n</code></pre>"},{"location":"Vehiculo/#evidencias","title":"\ud83d\udcf9 Evidencias","text":"<p>Evidencias en video aqu\u00ed.</p>"},{"location":"recursos/about/","title":"Quien soy?","text":"<p>Mi nombre es Sebasti\u00e1n G\u00f3mez Rodr\u00edguez, tengo 18 a\u00f1os, soy de Puebla-Puebla de la universidad Iberoamericana de Puebla, en el cual soy un estudiante de primer semestre en mecatronica.</p>"},{"location":"recursos/about/#contacto","title":"Contacto","text":"<p>Correo: 204486@iberopuebla.mx</p> <p>N\u00famero: +522215290319</p> <p></p>"},{"location":"recursos/about/#mis-intereses","title":"Mis intereses","text":"<p>Algunos de mis intereses son acerca de los deportes, computacion, construcci\u00f3n y/o reparaci\u00f3n de aparatos electr\u00f3nicos, instrumentos musicales, tomar fotografias, surfeo, ski, t y los videojuegos.</p>"},{"location":"recursos/about/#mis-logros","title":"Mis logros","text":"<p>Unos de mis logros son 3er lugar en las Olimpiadas nacionales de mexico como Puebla,3 a\u00f1os seguidos ganando Interjecuiticos con el Instituto Oriente de Puebla certificado de programacion de camaras de seguridad, buceo, fotografo de Munio 2024-2025 y medallista de 3er lugar en taekwondo.</p>"},{"location":"recursos/about/#universidad-iberoamericana","title":"Universidad Iberoamericana","text":"<p>Pagina de la Universidad.</p>"}]}